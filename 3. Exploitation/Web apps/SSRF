# **SSRF - Server side request forgery**

Server-side request forgery is a web security vulnerability that allows an attacker to cause the server-side application to make requests to an unintended location.

In a typical SSRF attack, the attacker might cause the server to make a connection to internal-only services within the organization's infrastructure. In other cases, they may be able to force the server to connect to arbitrary external systems. This could leak sensitive data, such as authorization credentials.

For example, imagine a shopping application that lets the 
user view whether an item is in stock in a particular store. To provide 
the stock information, the application must query various back-end REST 
APIs. It does this by passing the URL to the relevant back-end API 
endpoint via a front-end HTTP request. When a user views the stock 
status for an item, their browser makes the following request:

```
POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1
```

This causes the server to make a request to the specified 
URL, retrieve the stock status, and return this to the user.

In this example, an attacker can modify the request to specify a URL local to the server:

```
POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://localhost/admin
```

The server fetches the contents of the `/admin` URL and returns it to the user.

### SSRF attacks against other back-end systems

In some cases, the application server is able to interact 
with back-end systems that are not directly reachable by users. These 
systems often have non-routable private IP addresses. The back-end 
systems are normally protected by the network topology, so they often 
have a weaker security posture. In many cases, internal back-end systems
 contain sensitive functionality that can be accessed without 
authentication by anyone who is able to interact with the systems.

In the previous example, imagine there is an administrative interface at the back-end URL  `https://192.168.0.68/admin`. An attacker can submit the following request to exploit the SSRF vulnerability, and access the administrative interface:

```
POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://192.168.0.68/admin
```
